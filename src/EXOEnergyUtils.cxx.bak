#include "EXOEnergyUtils.hh"

ClassImp(EXOEnergyUtils)
/*
bool EXOEnergyUtils::RunHasInfo(int run)
{
  const EXODataRunInfo *edri = &EXORunInfoManager::GetDataRunInfo(run);
  const EXOMetadata *metaType = edri->FindMetaData("runType");
  const EXOMetadata *metaStart = edri->FindMetaData("startTime");
  const EXOMetadata *metaEnd = edri->FindMetaData("endTime");
  const EXOMetadata *metaSource = edri->FindMetaData("sourceType");
  const EXOMetadata *metaPosition = edri->FindMetaData("sourcePosition");
  return metaType && metaStart && metaEnd && metaSource && metaPosition;
}

bool EXOEnergyUtils::IsSourceRun(int run)
{
  if(!RunHasInfo(run))
    return false;
  
  const EXODataRunInfo *edri = &EXORunInfoManager::GetDataRunInfo(run);
  std::string runType = edri->FindMetaData("runType")->AsString();

  return (runType == "Data-Source calibration");
}

bool EXOEnergyUtils::IsRunSupported(int run)
{
  int prescale;
  float purity;
  std::vector<int> runs;

  return GetSupportedInfo(run,prescale,purity,runs);
}

const std::vector<int>* EXOEnergyUtils::GetSupportedRuns()
{
  int run = 0;
  int prescale;
  float purity;
  std::vector<int> *runs = new std::vector<int>();
  
  GetSupportedInfo(run,prescale,purity,*runs);
  return runs;
}


bool EXOEnergyUtils::GetSupportedInfo(int run, int& prescale, float& purity, std::vector<int>& runs)
{
  // Automatically generated by ../aux/create_c_array_purity_prescale.py
  int sizeArray = 990;
  int sourceRunArray[] = {2315, 2320, 2347, 2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 2363, 2364, 2365, 2366, 2367, 2368, 2369, 2382, 2388, 2394, 2410, 2411, 2412, 2415, 2416, 2417, 2418, 2421, 2422, 2423, 2424, 2425, 2426, 2427, 2428, 2429, 2430, 2431, 2432, 2433, 2434, 2444, 2445, 2446, 2447, 2448, 2449, 2450, 2469, 2473, 2479, 2480, 2496, 2526, 2538, 2543, 2555, 2566, 2578, 2596, 2608, 2620, 2634, 2635, 2640, 2646, 2653, 2667, 2674, 2683, 2689, 2690, 2691, 2708, 2714, 2719, 2725, 2732, 2737, 2743, 2748, 2754, 2761, 2766, 2771, 2785, 2804, 2811, 2817, 2828, 2837, 2843, 2848, 2858, 2865, 2866, 2867, 2883, 2884, 2885, 2886, 2895, 2897, 2898, 2904, 2923, 2927, 2933, 2938, 2943, 2947, 2955, 2966, 2971, 2981, 2986, 2991, 2995, 3007, 3018, 3019, 3024, 3028, 3032, 3034, 3048, 3053, 3057, 3074, 3091, 3099, 3109, 3120, 3124, 3137, 3142, 3147, 3152, 3153, 3158, 3169, 3173, 3178, 3184, 3195, 3199, 3204, 3214, 3218, 3222, 3223, 3227, 3231, 3236, 3246, 3250, 3254, 3258, 3262, 3266, 3270, 3281, 3283, 3295, 3298, 3308, 3310, 3311, 3312, 3313, 3342, 3345, 3347, 3351, 3352, 3355, 3358, 3361, 3364, 3367, 3376, 3379, 3382, 3383, 3386, 3389, 3392, 3395, 3404, 3407, 3410, 3413, 3416, 3417, 3418, 3419, 3420, 3421, 3423, 3424, 3425, 3426, 3427, 3428, 3430, 3431, 3433, 3434, 3436, 3440, 3451, 3456, 3459, 3463, 3468, 3471, 3475, 3476, 3488, 3492, 3497, 3500, 3503, 3507, 3511, 3516, 3520, 3531, 3534, 3537, 3538, 3539, 3542, 3547, 3550, 3562, 3566, 3570, 3575, 3576, 3580, 3592, 3605, 3614, 3617, 3626, 3629, 3630, 3634, 3643, 3646, 3647, 3648, 3652, 3656, 3659, 3662, 3665, 3673, 3675, 3677, 3680, 3685, 3689, 3692, 3702, 3707, 3710, 3713, 3717, 3720, 3724, 3727, 3736, 3739, 3742, 3745, 3751, 3754, 3765, 3768, 3772, 3775, 3778, 3787, 3790, 3791, 3794, 3797, 3800, 3803, 3806, 3815, 3818, 3821, 3829, 3836, 3848, 3856, 3868, 3877, 3880, 3883, 3889, 3898, 3901, 3906, 3909, 3914, 3926, 3931, 3935, 3956, 3961, 3962, 3966, 3969, 3975, 3983, 3998, 4001, 4009, 4022, 4034, 4039, 4045, 4052, 4057, 4064, 4070, 4080, 4087, 4093, 4094, 4095, 4096, 4097, 4098, 4099, 4100, 4101, 4102, 4103, 4104, 4105, 4106, 4110, 4111, 4112, 4113, 4116, 4123, 4136, 4151, 4152, 4153, 4154, 4155, 4156, 4157, 4159, 4173, 4174, 4175, 4184, 4185, 4203, 4206, 4211, 4216, 4217, 4221, 4225, 4228, 4232, 4245, 4252, 4262, 4270, 4277, 4287, 4292, 4297, 4300, 4303, 4310, 4319, 4322, 4327, 4328, 4329, 4334, 4335, 4341, 4369, 4377, 4383, 4389, 4395, 4400, 4407, 4414, 4421, 4427, 4435, 4438, 4439, 4442, 4443, 4444, 4449, 4450, 4451, 4458, 4463, 4468, 4477, 4483, 4489, 4498, 4503, 4509, 4519, 4528, 4534, 4544, 4551, 4561, 4571, 4577, 4590, 4592, 4596, 4597, 4600, 4609, 4612, 4615, 4620, 4628, 4633, 4640, 4645, 4648, 4654, 4657, 4660, 4663, 4667, 4676, 4684, 4687, 4692, 4697, 4703, 4709, 4715, 4726, 4729, 4732, 4735, 4740, 4745, 4758, 4766, 4769, 4770, 4771, 4772, 4773, 4777, 4778, 4779, 4780, 4781, 4785, 4786, 4787, 4788, 4789, 4790, 4824, 4827, 4828, 4829, 4830, 4831, 4832, 4833, 4834, 4835, 4836, 4839, 4840, 4841, 4852, 4859, 4864, 4870, 4877, 4884, 4896, 4901, 4909, 4915, 4920, 4926, 4934, 4941, 4946, 4952, 4959, 4964, 4969, 4977, 4982, 4985, 4989, 4992, 4997, 5003, 5008, 5013, 5014, 5015, 5016, 5017, 5018, 5019, 5020, 5021, 5027, 5030, 5033, 5036, 5042, 5045, 5046, 5047, 5048, 5049, 5050, 5051, 5052, 5053, 5056, 5057, 5058, 5062, 5063, 5064, 5066, 5067, 5068, 5069, 5072, 5073, 5074, 5077, 5078, 5079, 5080, 5088, 5093, 5099, 5114, 5117, 5118, 5123, 5131, 5137, 5146, 5189, 5203, 5219, 5220, 5221, 5222, 5223, 5224, 5225, 5226, 5227, 5264, 5279, 5307, 5317, 5320, 5322, 5323, 5325, 5326, 5327, 5328, 5329, 5330, 5331, 5332, 5333, 5334, 5335, 5336, 5338, 5339, 5341, 5342, 5343, 5344, 5345, 5346, 5347, 5348, 5349, 5351, 5352, 5353, 5354, 5355, 5356, 5357, 5358, 5359, 5360, 5361, 5362, 5369, 5370, 5371, 5379, 5395, 5396, 5398, 5405, 5412, 5418, 5426, 5427, 5432, 5438, 5446, 5451, 5453, 5457, 5460, 5469, 5474, 5484, 5489, 5494, 5501, 5509, 5515, 5531, 5532, 5533, 5534, 5535, 5536, 5537, 5538, 5539, 5543, 5546, 5549, 5553, 5558, 5563, 5567, 5576, 5580, 5583, 5589, 5598, 5603, 5605, 5606, 5608, 5609, 5612, 5613, 5618, 5621, 5624, 5631, 5634, 5636, 5638, 5639, 5640, 5641, 5642, 5643, 5644, 5645, 5651, 5657, 5662, 5668, 5676, 5680, 5696, 5705, 5711, 5717, 5724, 5731, 5737, 5744, 5749, 5754, 5761, 5767, 5774, 5775, 5776, 5777, 5778, 5779, 5780, 5781, 5782, 5783, 5784, 5785, 5786, 5787, 5792, 5794, 5795, 5796, 5797, 5798, 5799, 5800, 5801, 5802, 5803, 5804, 5805, 5806, 5807, 5809, 5810, 5811, 5812, 5813, 5814, 5815, 5816, 5817, 5818, 5820, 5822, 5824, 5825, 5827, 5828, 5829, 5830, 5831, 5832, 5833, 5834, 5835, 5836, 5837, 5838, 5839, 5840, 5841, 5842, 5843, 5844, 5845, 5846, 5847, 5848, 5849, 5850, 5851, 5852, 5853, 5854, 5855, 5856, 5857, 5859, 5860, 5861, 5862, 5863, 5864, 5865, 5866, 5867, 5868, 5869, 5870, 5872, 5874, 5880, 5886, 5894, 5895, 5896, 5898, 5900, 5901, 5905, 5908, 5909, 5913, 5916, 5921, 5925, 5928, 5935, 5939, 5942, 5946, 5949, 5952, 5955, 5992, 5998, 6003, 6011, 6015, 6022, 6025, 6032, 6039, 6045, 6048, 6051, 6057, 6062, 6067, 6072, 6079, 6088, 6091, 6094, 6099, 6106, 6117, 6124, 6131, 6138, 6162, 6190, 6215, 6218, 6225, 6230, 6239, 6240, 6241, 6242, 6243, 6244, 6245, 6246, 6247, 6248, 6249, 6250, 6251, 6252, 6253, 6254, 6255, 6256, 6257, 6258, 6259, 6260, 6261, 6262, 6263, 6264, 6265, 6266, 6267, 6268, 6269, 6270, 6271, 6272, 6273, 6274, 6275, 6276, 6277, 6278, 6279, 6280, 6281, 6282, 6283, 6284, 6285, 6286, 6287, 6288, 6289, 6290, 6291, 6292, 6293, 6294, 6295, 6296, 6297, 6298, 6299, 6300, 6301, 6302, 6303, 6304, 6305, 6306, 6307, 6308, 6309, 6310, 6311, 6312, 6313, 6314, 6315, 6316, 6317, 6318, 6319, 6320, 6321, 6322, 6323, 6324, 6325, 6326, 6327, 6328, 6329, 6330, 6331, 6332, 6333, 6334, 6335, 6336, 6337, 6338, 6339, 6340, 6341, 6342, 6343, 6344, 6345, 6346, 6347, 6348, 6349, 6350, 6351, 6352, 6353, 6354, 6355, 6356, 6357, 6358, 6359, 6360, 6361, 6362, 6363, 6364, 6365, 6366, 6367, 6368, 6369};
  int runTriggerPrescaleArray[] = {1, 1, -50, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 1, 1, 1, -50, 1, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, 1, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -50, 0, 0, 0, -50, -50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -50, -50, -50, 0, -50, 1, 1, 1, 1, -50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  float runPurityArray[] = {1.920, 2.185, 3.907, 3.705, 1.000, 3.505, 3.851, 3.075, 3.107, 4.100, 2.612, 1.000, 1.000, 1.000, 10.000, 3.416, 2.694, 2.694, 3.622, 2.790, 3.226, 2.513, 1.992, 2.844, 0.785, 10.000, 2.837, 2.364, 2.822, 3.333, 3.387, 2.664, 3.261, 3.008, 2.813, 1.000, 3.164, 2.769, 2.769, 2.767, 2.767, 2.917, 2.706, 2.520, 2.619, 3.608, 1.000, 3.057, 2.524, 3.952, 4.135, 0.742, 4.374, 3.667, 0.702, 3.035, 2.496, 3.524, 2.567, 3.940, 3.313, 3.459, 2.854, 3.669, 3.080, 3.721, 2.173, 2.750, 2.255, 2.872, 3.122, 2.668, 2.413, 2.179, 2.176, 3.260, 3.146, 2.776, 1.365, 2.867, 1.475, 2.616, 4.313, 2.841, 2.361, 10.000, 2.671, 1.695, 2.331, 1.582, 3.332, 2.716, 2.458, 3.022, 3.728, 2.294, 2.642, 2.354, 2.012, 2.550, 1.947, 2.565, 2.199, 2.636, 2.263, 2.238, 2.618, 1.979, 1.899, 1.576, 2.143, 2.146, 2.118, 1.892, 1.562, 1.600, 1.871, 1.747, 3.034, 3.846, 4.017, 2.852, 3.604, 4.446, 3.485, 3.549, 2.878, 3.326, 2.583, 4.647, 4.105, 4.001, 4.207, 4.171, 3.938, 3.636, 0.570, 0.990, 1.145, 2.668, 2.836, 2.910, 3.624, 5.951, 3.500, 2.631, 2.483, 3.571, 4.523, 4.037, 2.531, 3.353, 4.005, 3.278, 3.499, 5.200, 4.673, 3.928, 6.460, 3.181, 6.536, 6.014, 3.529, 4.147, 4.541, 3.812, 3.696, 2.759, 3.345, 10.000, 3.766, 4.195, 1.000, 3.592, 5.119, 3.013, 3.951, 2.896, 3.090, 4.803, 2.751, 3.767, 4.215, 3.798, 6.074, 4.561, 4.159, 4.862, 4.738, 4.307, 3.580, 3.750, 3.253, 8.465, 4.148, 7.961, 4.425, 2.900, 2.900, 2.900, 4.983, 3.681, 3.005, 2.614, 3.037, 3.030, 3.739, 5.635, 3.576, 2.903, 10.000, 5.063, 3.407, 3.105, 3.940, 3.482, 3.673, 4.972, 5.416, 4.322, 10.000, 5.089, 3.155, 4.287, 2.804, 3.716, 5.003, 2.658, 5.436, 10.000, 2.813, 3.017, 3.696, 3.364, 1.000, 1.000, 2.521, 1.000, 1.628, 4.221, 3.868, 6.078, 10.000, 4.776, 3.391, 2.094, 3.122, 5.458, 3.292, 2.959, 2.700, 3.292, 5.507, 2.332, 2.269, 4.534, 3.570, 7.702, 4.984, 3.230, 3.118, 3.285, 3.233, 2.782, 5.693, 3.658, 4.204, 5.214, 3.561, 3.818, 3.778, 3.791, 4.538, 4.031, 5.239, 5.449, 2.527, 4.959, 3.878, 4.045, 3.024, 4.072, 3.613, 3.804, 2.825, 3.725, 3.706, 4.213, 4.942, 1.682, 2.955, 5.143, 2.678, 4.640, 3.777, 9.612, 3.418, 3.712, 4.159, 3.484, 2.855, 2.716, 1.596, 2.172, 3.034, 2.071, 8.832, 4.126, 2.202, 2.529, 4.712, 4.063, 4.085, 2.983, 3.651, 6.087, 7.463, 10.000, 2.475, 3.703, 2.322, 4.940, 3.108, 4.497, 3.077, 3.003, 4.434, 5.603, 6.058, 3.913, 10.000, 4.543, 4.437, 4.494, 4.195, 5.553, 3.848, 3.393, 1.000, 4.180, 3.658, 4.688, 4.122, 10.000, 10.000, 10.000, 1.496, 3.306, 10.000, 10.000, 2.062, 5.576, 2.920, 0.385, 3.997, 5.662, 1.000, 1.000, 2.418, 0.056, 3.719, 0.015, 0.032, 0.022, 1.000, 0.039, 0.052, 0.058, 1.000, 1.000, 0.127, 0.230, 0.403, 0.852, 0.397, 0.515, 1.064, 1.601, 2.247, 2.576, 3.261, 3.064, 1.910, 2.428, 4.480, 3.699, 3.614, 3.349, 2.593, 2.017, 1.783, 1.822, 2.109, 1.655, 1.017, 1.238, 1.380, 1.884, 4.529, 3.401, 3.442, 4.375, 2.704, 2.930, 3.405, 4.974, 5.009, 3.031, 1.000, 1.000, 3.891, 3.135, 3.623, 2.090, 6.600, 4.406, 3.639, 8.974, 9.462, 4.122, 2.765, 3.093, 5.310, 4.271, 2.984, 4.229, 4.852, 3.308, 5.644, 2.373, 5.632, 3.950, 9.794, 3.573, 0.797, 0.803, 1.952, 1.456, 1.861, 4.955, 5.356, 5.462, 4.067, 4.476, 5.409, 3.708, 2.503, 2.775, 4.255, 1.977, 3.728, 3.378, 3.209, 2.207, 3.034, 4.629, 3.204, 3.132, 3.404, 3.171, 3.771, 2.117, 2.752, 3.513, 3.484, 6.852, 4.265, 4.038, 3.379, 4.735, 4.353, 3.901, 4.246, 3.394, 3.745, 3.839, 2.927, 6.409, 2.590, 3.151, 2.877, 4.786, 4.361, 2.677, 2.761, 4.732, 10.000, 2.168, 5.009, 6.422, 2.926, 2.926, 2.926, 2.926, 4.131, 4.330, 2.264, 3.345, 3.173, 3.732, 3.482, 6.168, 3.185, 4.884, 5.316, 4.040, 5.729, 5.526, 3.715, 3.359, 5.034, 3.628, 2.521, 3.908, 1.990, 4.285, 4.015, 5.858, 3.251, 4.730, 4.503, 6.692, 5.447, 3.854, 2.976, 9.470, 1.536, 1.532, 1.534, 1.536, 1.682, 1.814, 2.038, 1.857, 2.227, 3.969, 3.150, 5.610, 4.288, 3.264, 1.466, 10.000, 4.162, 1.774, 1.738, 1.000, 3.324, 9.062, 3.058, 4.118, 2.810, 4.260, 3.611, 3.389, 3.541, 10.000, 2.828, 6.225, 3.950, 10.000, 8.429, 4.515, 1.000, 5.600, 10.000, 5.704, 9.806, 5.764, 2.579, 3.874, 4.185, 10.000, 3.013, 2.290, 3.521, 5.290, 3.949, 4.090, 5.078, 3.949, 4.325, 3.738, 5.812, 5.777, 3.524, 4.845, 10.000, 2.494, 3.820, 2.539, 4.190, 4.318, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 8.052, 10.000, 1.939, 1.509, 2.245, 2.281, 2.051, 2.163, 2.968, 2.230, 2.571, 3.063, 3.350, 2.929, 3.939, 2.565, 2.259, 3.999, 3.097, 3.090, 3.224, 3.552, 3.169, 4.557, 7.206, 6.074, 6.379, 3.990, 3.628, 4.051, 5.926, 6.126, 3.328, 1.000, 3.725, 4.312, 5.673, 3.936, 10.000, 2.761, 3.502, 4.949, 4.009, 7.618, 4.139, 5.861, 5.766, 3.773, 2.153, 7.163, 6.918, 0.602, 0.583, 0.589, 0.611, 0.613, 0.686, 0.777, 0.832, 1.702, 2.389, 3.260, 3.123, 7.783, 10.000, 2.530, 8.694, 7.194, 5.596, 10.000, 5.097, 2.221, 2.950, 2.861, 2.944, 3.015, 3.916, 3.650, 2.805, 3.731, 3.754, 4.013, 7.240, 3.346, 3.480, 2.925, 3.643, 5.562, 3.760, 5.052, 3.083, 3.029, 6.652, 3.616, 7.711, 6.430, 3.879, 5.964, 4.404, 2.303, 3.325, 5.372, 5.814, 4.109, 3.744, 3.628, 2.839, 5.698, 10.000, 4.256, 4.495, 4.366, 5.649, 4.317, 3.873, 3.190, 3.190, 6.620, 3.267, 2.888, 10.000, 3.016, 4.586, 6.090, 3.859, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 3.847, 4.632, 4.534, 4.492, 3.725, 3.323, 4.414, 3.722, 4.356, 3.224, 3.224, 3.224, 3.224, 3.224, 3.224, 4.751, 3.226, 3.226, 3.226, 3.093, 10.000, 3.227, 3.227, 3.227, 3.227, 3.227, 3.227, 3.227, 4.846, 4.168, 4.104, 6.685, 5.924, 10.000, 6.133, 5.464, 6.663, 4.222, 2.962, 4.427, 6.129, 5.098, 3.153, 3.708, 4.308, 5.450, 3.393, 7.943, 5.480, 5.356, 4.783, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 7.913, 0.040, 0.037, 0.082, 0.177, 0.518, 0.777, 0.771, 1.132, 1.531, 2.002, 1.756, 2.509, 1.057, 0.648, 1.031, 2.052, 2.503, 2.583, 4.569, 3.196, 4.213, 10.000, 5.154, 2.996, 4.078, 3.975, 3.381, 4.771, 1.973, 4.252, 3.652, 2.553, 3.569, 4.535, 4.299, 3.751, 3.055, 3.149, 4.342, 10.000, 3.804, 3.115, 6.816, 2.740, 8.314, 8.630, 4.377, 6.499, 4.714, 9.042, 5.049, 8.580, 3.754, 3.445, 10.000, 10.000, 3.534, 6.747, 4.099, 3.497, 4.942, 3.347, 10.000, 10.000, 1.000, 1.000, 10.000, 3.388, 4.048, 3.435, 5.329, 6.338, 4.607, 5.097, 6.862, 5.503, 4.081, 4.632, 2.613, 4.559, 3.941, 2.418, 2.818, 3.347, 2.727, 4.765, 2.684, 3.727, 4.637, 4.912, 4.279, 2.635, 5.338, 3.064, 4.431, 2.721, 3.858, 2.254, 2.914, 4.271, 3.098, 4.024, 4.136, 3.913, 3.506, 3.177, 4.759, 3.897, 3.203, 3.021, 2.713, 2.010, 2.799, 2.663, 4.944, 3.449, 2.682, 6.385, 2.684, 4.561, 1.163, 10.000, 6.345, 2.724, 3.300, 3.755, 3.334, 2.488, 2.813, 2.651, 2.998, 3.688, 2.882, 3.429, 3.354, 2.856, 4.069, 3.187, 2.398, 2.549, 2.984, 2.656, 4.347, 3.693, 2.777, 2.636, 2.342, 3.259, 2.825, 3.297, 3.482, 4.500, 3.920, 2.391, 2.897, 2.700, 3.022, 2.823, 2.827, 2.591, 2.298, 6.818, 2.556, 3.006, 1.923, 2.261, 5.786, 2.990, 3.232, 3.514, 2.669, 2.768, 2.670, 4.139, 2.617, 3.891, 3.712};

  // Adapted code
  std::vector<int> sourceRun( sourceRunArray, sourceRunArray + sizeArray);
  runs = sourceRun;
  //std::vector<float> runTriggerPrescale( runTriggerPrescaleArray, runTriggerPrescaleArray + sizeArray);
  //std::vector<int> runPurity( runPurityArray, runPurityArray + sizeArray);

  std::vector<int>::iterator iterRun = std::find(sourceRun.begin(),sourceRun.end(),run);
  if(iterRun == sourceRun.end())
    return false;
  int runPos = iterRun - sourceRun.begin();

  if(runPos < sizeArray)
  {
    prescale = runTriggerPrescaleArray[runPos];
    purity = runPurityArray[runPos];
  }
  else
  {
    return false;
  }

  return true;  
}

const EXOEnergySourceRunInfo* EXOEnergyUtils::GetSourceRunInfo(Int_t run)
{
  int prescale;
  float purity;
  std::vector<int> runs;
 
  if(GetSupportedInfo(run,prescale,purity,runs))
    return new EXOEnergySourceRunInfo(run,prescale,purity);

  return 0;
}

const std::vector<int>* EXOEnergyUtils::GetSourceRunsInSelection(const EXOEnergyRunSelection* selection, bool showTestingRun)
{
  std::vector<int> *selectedRuns = new std::vector<int>();
  const std::vector<int>* supportedRuns = GetSupportedRuns();

  if(showTestingRun)
  {
    std::cout << "Selection...\n";
    selection->Print();
    std::cout << "Testing... ";
  }
  
  for(size_t i = 0; i < supportedRuns->size(); i++)
  {
    const EXOEnergySourceRunInfo* runInfo = GetSourceRunInfo(supportedRuns->at(i));
    if(!runInfo)
      continue;
    
    bool passSelection = runInfo->SatisfyRequirements(selection);
    
    if(showTestingRun)
    {
      runInfo->Print();
      std::cout << "Run " << runInfo->fRunNumber.at(0) << " pass selection? " << passSelection << std::endl;
    }
    
    if(passSelection)
      selectedRuns->push_back(runInfo->fRunNumber.at(0));
  }
  
  return selectedRuns;
}
*/
/*
const std::vector<int>* EXOEnergyUtils::GetLJSourceRuns(const EXOEnergyRunSelection* selection, bool showTestingRun)
{
  std::vector<int> *ljRuns = new std::vector<int>();

  return ljRuns;
}
*/
